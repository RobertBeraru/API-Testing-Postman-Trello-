{
	"info": {
		"_postman_id": "05e5ac75-61f2-4eed-9b37-f64135343e77",
		"name": "Trello REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30696470"
	},
	"item": [
		{
			"name": "Create a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.globals.set(\"board_id\", jsonData.id);\r",
							"\r",
							"pm.test(\"Create a Board Successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Corect board name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"MyTestBoard\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}boards/?key=719eeacf2961900c912f06468c035069&name=MyTestBoard&token=ATTA2f625e1551f392841d7b9d31d5ff6be17d72714b0ed19e5291df62448a9e6d63791EE423",
					"host": [
						"{{base_url}}boards"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "key",
							"value": "719eeacf2961900c912f06468c035069"
						},
						{
							"key": "name",
							"value": "MyTestBoard"
						},
						{
							"key": "token",
							"value": "ATTA2f625e1551f392841d7b9d31d5ff6be17d72714b0ed19e5291df62448a9e6d63791EE423"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.globals.set(\"list_id\", jsonData.id);\r",
							"\r",
							"pm.test(\"List has been created successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(\"Test_List\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}lists?name=Test_List&idBoard={{board_id}}&key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}lists"
					],
					"query": [
						{
							"key": "name",
							"value": "Test_List"
						},
						{
							"key": "idBoard",
							"value": "{{board_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.globals.set(\"card_id\", jsonData.id);\r",
							"\r",
							"pm.test(\"Card has been created successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Card name verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Test Card\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}cards?idList={{list_id}}&key={{key}}&token={{token}}&name=Test Card",
					"host": [
						"{{base_url}}cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{list_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Test Card"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"let url = jsonData.url;\r",
							"\r",
							"pm.test('List has been created successfully', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(\"My New Board Test Name \");\r",
							"});\r",
							"\r",
							"pm.test(\"URL has been updated successfully\", function () {\r",
							"  pm.expect(pm.response.json().url).to.eql(url);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}boards/{{board_id}}?key={{key}}&token={{token}}&name=My New Board Test Name ",
					"host": [
						"{{base_url}}boards"
					],
					"path": [
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "My New Board Test Name "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update List Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Updated list name successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"New list name verified successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"New List Name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}lists/{{list_id}}?key={{key}}&token={{token}}&name=New List Name",
					"host": [
						"{{base_url}}lists"
					],
					"path": [
						"{{list_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "New List Name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Card Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update card name successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"New Test Card Name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}cards/{{card_id}}?key={{key}}&token={{token}}&name=New Test Card Name",
					"host": [
						"{{base_url}}cards"
					],
					"path": [
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "New Test Card Name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"let url = jsonData.url\r",
							"\r",
							"pm.test('Read a board successfully', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test('Board name is corect', function () {\r",
							"    pm.expect(jsonData.name).to.eql('My New Board Test Name ');\r",
							"})\r",
							"\r",
							"pm.test(\"URL is correct\", function () {\r",
							"  pm.expect(pm.response.text()).to.include(url);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}boards/{{board_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}boards"
					],
					"path": [
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Read a list successfully', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test('List name is corect', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('New List Name');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}lists/{{list_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}lists"
					],
					"path": [
						"{{list_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Read a card successfully', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test('Card name is corect', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('New Test Card Name');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}cards/{{card_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}cards"
					],
					"path": [
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var jsonData = pm.response.json();\r",
							"pm.globals.set(\"checklist_id\", jsonData.id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"New Test Checklist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/checklists?idCard={{card_id}}&key={{key}}&token={{token}}&name=New Test Checklist",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"checklists"
					],
					"query": [
						{
							"key": "idCard",
							"value": "{{card_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "New Test Checklist"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read a checklist successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"New Test Checklist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/checklists/{{checklist_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Checklist Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checklist name updated successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"New Updated Checklist Name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/checklists/{{checklist_id}}?key={{key}}&token={{token}}&name=New Updated Checklist Name",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "New Updated Checklist Name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"List is archived successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Corect list archived\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"New List Name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Closed status 'true'\", function () {\r",
							"    pm.expect(jsonData.closed).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}lists/{{list_id}}/closed?key={{key}}&token={{token}}&value=true",
					"host": [
						"{{base_url}}lists"
					],
					"path": [
						"{{list_id}}",
						"closed"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "value",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checklist is deleted successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/checklists/{{checklist_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Card is deleted successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}cards/{{card_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}cards"
					],
					"path": [
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Board is deleted successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}boards/{{board_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}boards"
					],
					"path": [
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Resonable response time\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	]
}